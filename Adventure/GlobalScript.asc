

// Called when the game starts, before the first room is loaded
function game_start() {   
  // Put the code all in a function and then just call the function. 
  // It saves cluttering up places like game_start.
  //initialize_control_panel(); 
  // Use the KeyboardMovement module to, per default, replicate the standard
  // keyboard movement of most Sierra games. See KeyboardMovement.txt for more info
  KeyboardMovement.SetMode(eKeyboardMovement_Tapping); 
}

function repeatedly_execute() {
  
  // Put here anything you want to happen every game cycle, even when
  // the game is paused. This will not run when the game is blocked
  // inside a command like a blocking Walk()
  if(cFabien.ActiveInventory == null){
    Object *obj = Object.GetAtScreenXY(mouse.x, mouse.y);
    if (obj != null && mouse.Mode != eModeUseinv)
    {
      // set new mouse mode until mouse leaves object
      Mouse.SaveCursorUntilItLeaves();
      Mouse.Mode = eModeInteract;
    }
    else{
      Hotspot *hot = Hotspot.GetAtScreenXY(mouse.x,  mouse.y);
      if (hot != null && mouse.Mode != eModeUseinv && hot.ID > 0 )
      {
        // set new mouse mode until mouse leaves object
        Mouse.SaveCursorUntilItLeaves();
        Mouse.Mode = eModeInteract;
        if (cFabien.Room == 1){
          Mouse.UseModeGraphic(eModeWalkto);
        }
      }
      else{Character *charact = Character.GetAtScreenXY(mouse.x,  mouse.y); 
    if ((charact == cDruid || charact == cGod) && mouse.Mode != eModeUseinv)
    {
      // set new mouse mode until mouse leaves object
      Mouse.SaveCursorUntilItLeaves();
      Mouse.Mode = eModeTalkto;
    }
        
        else{
          GUI *inv = GUI.GetAtScreenXY(mouse.x,  mouse.y);
          if(inv != null)
          {
             //Mouse.SaveCursorUntilItLeaves();
             Mouse.Mode = eModeInteract;
          }
          else{
            Mouse.Mode = eModeWalkto;
          }
        }
      }
    }
  }
  else{
  }
  if (IsGamePaused() == 1) return;

  // Put here anything you want to happen every game cycle, but not
  // when the game is paused.
}

function repeatedly_execute_always() {
  Object *obj = Object.GetAtScreenXY(mouse.x, mouse.y);
  GUI *guiObject = GUI.GetAtScreenXY(mouse.x,  mouse.y);
  if (guiObject != null && guiObject.ID == 1 && cFabien.ActiveInventory == null){
    Mouse.Mode = eModeInteract;
    if (guiObject.Y >  446){
      guiObject.Y = guiObject.Y - 10;
    }
  }
  else if(gList.Y < 620){
    gList.Y = gList.Y + 10;
  }
  if (obj != null && mouse.Mode != eModeUseinv)
  {
    // set new mouse mode until mouse leaves object
    Mouse.SaveCursorUntilItLeaves();
    Mouse.Mode = eModeInteract;
  } 
  // Put anything you want to happen every game cycle, even
  // when the game is blocked inside a command like a
  // blocking Walk().
  // You cannot run blocking commands from this function.
  
}

/*function show_inventory_window () 
{
  gInventory.Visible = true;
  // switch to the Use cursor (to select items with)
  mouse.Mode = eModeInteract;
  // But, override the appearance to look like the arrow
  mouse.UseModeGraphic(eModePointer);
}*/


function on_key_press(eKeyCode keycode) {
  if (keycode == eKeyCtrlQ)  QuitGame(1);
}


function on_mouse_click(MouseButton button) {
  // called when a mouse button is clicked. button is either LEFT or RIGHT
  
  if(cFabien.Room == 3){
    gInventory.Visible = true;
    gList.Visible = true;
    cFabien.ChangeRoom(1,  1000,  620);
  }
  
  if (button == eMouseLeft) {
    Room.ProcessClick(mouse.x, mouse.y, mouse.Mode );
  }
  Object *obj = Object.GetAtScreenXY(mouse.x, mouse.y);
  Hotspot *hot = Hotspot.GetAtScreenXY(mouse.x,  mouse.y);
  Character *charact = Character.GetAtScreenXY(mouse.x,  mouse.y);
  if ((obj == null && (hot == null || hot.ID == 0) && charact == null))// || (stage == 2 && obj != null && obj.ID != 11))
  {
    mouse.Mode = eModeWalkto;
    cFabien.ActiveInventory = null;
  }
  
}

function interface_click(int interface, int button) {
  // This function is obsolete, from 2.62 and earlier versions.
}

function btnIconCurInv_Click(GUIControl *control, MouseButton button) {
  
    mouse.Mode = eModeUseinv;
}


function btnIconExit_Click(GUIControl *control, MouseButton button) {
  
  QuitGame(1);
}

function cEgo_Look()
{
  Display("Damn, I'm looking good!");
}

function cEgo_Interact()
{
  Display("You rub your hands up and down your clothes.");
}

function cEgo_Talk()
{
  Display("Talking to yourself is a sign of madness!");
}

//START OF CONTROL PANEL FUNCTIONS


function dialog_request(int param) 
{
  // This is used by the dialog text parser if you need to process
  // text that the player types in to the parser.
  // It is not used by default.
}



function gInventory_OnClick(GUI *theGui, MouseButton button)
{
}


function cDruid_AnyClick()
{
  if(cFabien.Room == 2){
    if (zapalkiCollected == false){
      cDruid.Say("Zapa=ek nie szukaj, mam je tutaj w kieszeni.");
      if(cDruid.x != 2651 && cDruid.x != 1000){
        cDruid.Walk(2651,  630, eNoBlock, eWalkableAreas);
      }
      collectedItems++;
      cFabien.AddInventory(iZapalki);
      zapalkiCollected = true;
      aPick_up_item.Play();
      CallRoomScript(4);
    }
    else if (collectedItems == 5 && stage == 1){
      
      //CallRoomScript(1);
    }
    else{
      cDruid.SayBackground("Drewno, chochla, kocio=ek i profesjonalny uniform - tego potrzebujemy.");
    }
  }
}

function cGod_AnyClick()
{
  //CallRoomScript(2);
  if(cFabien.Room == 2){
    if(filizankaCollected == true){
      if(cFabien.ActiveInventory == iFilizankaPelna){
        
        CallRoomScript(2);
      }
      else{
        //cFabien.Say("pusta filizanka");
      }
    }
    else{
      cGod.Say("No chyba nie b$d$ pi% prosto z gara, co?");
      cGod.Animate(0, 5, eRepeat, eNoBlock, eForwards);
    }
  }
}
